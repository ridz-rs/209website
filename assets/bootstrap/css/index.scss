@import url('https://fonts.googleapis.com/css?family=Montserrat:100');

// #051622 #1BA098 #DEB992


html, body, h1 {
	padding: 0;
	margin: 0;
    font-family: 'Montserrat', sans-serif;
}

html {
    scroll-behavior: smooth;
}

body {
  background-color: #fff;
}

#app {
	background: rgb(10,10,10);
	height: 50vh;
	width: 100%;
	margin: 0;
	padding: 0;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	background: linear-gradient(rgba(10,10,10,.6),rgba(0,0,0,.9)), repeating-linear-gradient(0, transparent, transparent 2px, black 3px, black 3px),
		url('https://images.unsplash.com/photo-1506399558188-acca6f8cbf41?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjE0NTg5fQ&s=7118759521e3184778a3b5e010e202c6');
	background-size: cover;
	background-position: center;
	z-index: 1;
}

#wrapper {
	 text-align: center;
}

.sub {
	color: rgb(100,220,220);
	letter-spacing: 1em;
}


/* // Here's the meat and potatoes. */

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
}

.glitch {
	position: relative;
	color: white;
	font-size: 4em;
	letter-spacing: .5em;
	/* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
	animation: glitch-skew 1s infinite linear alternate-reverse;
	
	/* // Creates a copy before our text.  */
	&::before{
		/* // Duplicates our text with the mixin. */
		@include glitchCopy;
		/* // Scoots text slightly to the left for the color offset. */
		left: 2px;
		/* // Creates the color 'shadow' that happens on the glitch. */
		text-shadow: -2px 0 #ff00c1;
		/* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
		clip: rect(44px, 450px, 56px, 0);
		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
		animation: glitch-anim 5s infinite linear alternate-reverse;
	}
	
	/* // Creates a copy after our text. Note comments from ::before. */
	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
		animation: glitch-anim2 1s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

/* // Same deal, just duplicated for ultra randomness. */
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

/* // Does the same deal as before, but now only skews. Used for main text. */
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}


$total-arrows: 3;
$arrow-line-length: 30px;
$arrow-line-width: 4px;

// arrow animtion + choose direction
@mixin arrow-transitions($rot: 0deg) {
  transform: translate(-50%, -50%) rotateZ($rot);
}

// arrows
.arrowcontainer {
  display: block;
  width: 30px;
  height: 80px;  
  position: absolute;
  top: 90%;
  left: 50%;
  @include arrow-transitions(0deg);
  &:hover {
    cursor: pointer;
    .arrow {
      top: 50%;
      &:before {
        @include arrow-transitions(-30deg);
      }
      &:after {
        @include arrow-transitions(30deg);
      }      
    }
  }
}
.arrow {
  position: absolute;
  left: 50%;
  transition: all .4s ease;
  &:before,
  &:after {
    transition: all .4s ease;
    content: '';
    display: block;
    position: absolute;
    transform-origin: bottom right;
    background: #000;
    width: $arrow-line-width;
    height: $arrow-line-length;
    border-radius: 10px;
    transform: translate(-50%, -50%) rotateZ(-45deg);
  }
  &:after {
    transform-origin: bottom left;
    transform: translate(-50%, -50%) rotateZ(45deg);
  }
  @for $i from 1 through $total-arrows {
    &:nth-child(#{$i}) {
      opacity: 0.3 * $i;
      top: 15 + (100% * $i/5);
    }
  }
}

#portfolio {
    background-color: #000;
}

@import url('https://fonts.googleapis.com/css?family=Lato:300,900');

$transition-ease-in-out: all .25s ease-in-out 0s;
$transition-cubic-bezier : all 0.75s cubic-bezier(0.68, -0.55, 0.265, 1.55);
$animation-offset: 80px;

*, :after, :before {
    box-sizing: border-box;
}

strong {
	font-weight: 900;
}
.canvas-wrapper {
	display: flex;
	align-items: center;
    justify-content: space-between;
	height: 100%;
	margin-top: 15%;
	.canvas + .canvas {
		margin-left: 40px;
	}
}

.canvas {
	position: relative;
	display: block;
	width: 400px;
	height: 400px;
	padding: 20px;
	color: inherit;
	text-decoration: none;
}
.canvas_border {
	position: absolute;
	top: 40px;
	left: -40px;
	height: 100%;
	width: 100%;
	z-index: 0;

	svg {
		height: 100%;
		width: 100%;
	}
}
.rect-gradient {
	stroke-dasharray: 2000;
	stroke-dashoffset: 2000;
	animation: erase-line 1s ease-in-out forwards;
}
.canvas_img-wrapper {
	position: absolute;
	display: flex;
	align-items: center;
	justify-content: center;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	transform: rotate(-10deg) skew(-10deg);
	overflow: hidden;
	background: white;
}
.canvas_img {
	transform: scale3d(.9,.9,.9);
	opacity: .3;
	max-width: 300px;
	max-height: 300px;
}
.canvas_copy {
	position: absolute;
	bottom: 0;
	left: 85%;
	text-transform: uppercase;
	color: grey;
	z-index: 100;
}
.canvas_copy--left {
	left: -25%;
}
.canvas_copy_title {
	font-size: 62px;
	display: block;
	transform: translateX(-#{$animation-offset});
		transition: $transition-cubic-bezier 0s;
		color:  #dac527;;

		&:nth-child(1) {
			transition-delay: 0.1s;
			}
		&:nth-child(2) {
			transition-delay: 0.2s;
			}
}
.canvas_copy_subtitle {
	display: block;
	transform: rotate(270deg) translateY(-100%) translateX(calc(-100% - #{$animation-offset}));
	transform-origin: top left;
	position: absolute;
	left: 0;
	top: 8px; //This needs to change with font size. It's an offset for the line-height of the "hellow world"
	font-size: 24px;
	font-weight: 900;
	transition: all 0.75s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.35s;
}
.canvas_copy_details {
	display: block;
	transition: $transition-cubic-bezier 0.14s;
	transform: translateX(-#{$animation-offset});
		}
.canvas_border, .canvas_img-wrapper, .canvas_img  {
	transition: $transition-ease-in-out;	
}
.canvas_border, .canvas_img-wrapper {
	transform: rotate(-10deg) skew(-10deg);	
}
.canvas_copy_title, .canvas_copy_subtitle, .canvas_copy_details {
	opacity: 0;
}
.canvas:hover {
	.canvas_copy_title, .canvas_copy_subtitle, .canvas_copy_details, .canvas_img {
		opacity: 1;
	}
	.canvas_border, .canvas_img-wrapper {
		transform: rotate(-14deg) skew(-14deg) scale(0.96);
	}
	.canvas_img {
		transform: scale3d(1,1,1);
	}
	.canvas_copy_title, .canvas_copy_details {
		transform: translateX(0);
	}
	.canvas_copy_subtitle {
		transform: rotate(270deg) translateY(-100%) translateX(-100%);
	}
	.rect-gradient {
		animation: draw-line 3s cubic-bezier(0.19, 1, 0.22, 1) forwards;
	}
}

@keyframes draw-line {
	from {
		stroke-dashoffset: 2000;		
	}
	to {
		stroke-dashoffset: 0;
	}
}
@keyframes erase-line {
	from {
		stroke-dashoffset: 0;
	}
	to {
		stroke-dashoffset: 2000;		
	}
}
@keyframes fade-in {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

#loading {
    position: relative;
    top: 50%;
    margin: -30px auto;
    text-align: center;
}
  
.glow {
    color: #f00;
    text-shadow: 0px 0px 10px #f00;
}
  
span {
    display: inline-block;
    padding: 0 10px;
}

.arrowcontainer2 {
    display: block;
    width: 30px;
    height: 80px;  
    position: relative;
    align-items: center;
    margin-left: 48%;
    margin-bottom: 5%;
    @include arrow-transitions(0deg);
    &:hover {
      cursor: pointer;
      .arrow2 {
        top: 50%;
        &:before {
          @include arrow-transitions(-30deg);
        }
        &:after {
          @include arrow-transitions(30deg);
        }      
      }
    }
  }

  .arrow2 {
    position: absolute;
    left: 50%;
    transition: all .4s ease;
    &:before,
    &:after {
      transition: all .4s ease;
      content: '';
      display: block;
      position: absolute;
      transform-origin: bottom right;
      background: white;
      width: $arrow-line-width;
      height: $arrow-line-length;
      border-radius: 10px;
      transform: translate(-50%, -50%) rotateZ(-45deg);
    }
    &:after {
      transform-origin: bottom left;
      transform: translate(-50%, -50%) rotateZ(45deg);
    }
    @for $i from 1 through $total-arrows {
      &:nth-child(#{$i}) {
        opacity: 0.3 * $i;
        top: 15 + (100% * $i/5);
      }
    }
  }